#!/usr/bin/env python3

# all list <date> :works
# profile list <date> :works
# profile delete <date> --dry-run :works
# profile delete <date> :works 
# all delete <date> --dry-run :works
# all delete <date> :works but duplicating data in snapshots.csv

import boto3
import csv
import sys
import pytz
import os
from datetime import datetime

def get_region_for_profile(profile_name, aws_config_path):
    try:
        with open(aws_config_path, 'r') as file:
            lines = file.readlines()
            found_profile = False
            for line in lines:
                if line.strip().startswith(f'[profile {profile_name}]'):
                    found_profile = True
                elif found_profile and line.strip().startswith("region"):
                    return line.split(" = ")[1].strip()
            if not found_profile:
                print(f"Profile '{profile_name}' not found in AWS config.")
                sys.exit(1)
            else:
                print(f"Region for profile '{profile_name}' not found in AWS config.")
                sys.exit(1)
    except Exception as e:
        print(f"Error occurred while reading AWS config: {e}")
        sys.exit(1)

def get_snapshots(profile_name, older_than_date, region, snapshot_type):
    try:
        session = boto3.Session(profile_name=profile_name)
        rds = session.client('rds', region_name=region)

        existing_snapshots = set()
        if os.path.isfile('snapshots.csv'):
            with open('snapshots.csv', mode='r', newline='') as file:
                reader = csv.reader(file)
                next(reader, None)  # Skip header
                for row in reader:
                    existing_snapshots.add((row[1], row[0], row[2]))  # (DBSnapshotIdentifier, Profile, Type)

        snapshots_to_delete = []

        paginator = rds.get_paginator('describe_db_snapshots')
        page_iterator = paginator.paginate(SnapshotType=snapshot_type)

        for page in page_iterator:
            for snapshot in page['DBSnapshots']:
                snapshot_id = snapshot['DBSnapshotIdentifier']
                snapshot_time = snapshot['SnapshotCreateTime'].replace(tzinfo=pytz.UTC)
                if snapshot_time < older_than_date and (snapshot_id, profile_name, snapshot_type) not in existing_snapshots:
                    snapshots_to_delete.append((snapshot_id, snapshot_time, snapshot['AllocatedStorage'], snapshot_type))
                    existing_snapshots.add((snapshot_id, profile_name, snapshot_type))  # Add to existing_snapshots to prevent duplicates

        # Zápis pouze nových snímků do CSV souboru
        if snapshots_to_delete:
            with open('snapshots.csv', mode='a', newline='') as file:
                writer = csv.writer(file)

                for snapshot_id, start_time, size, type in snapshots_to_delete:
                    writer.writerow([profile_name, snapshot_id, start_time.strftime("%Y-%m-%d %H:%M:%S"), size, type])

        return snapshots_to_delete
    except Exception as e:
        print(f"Error occurred: {e}")
        sys.exit(1)

def delete_snapshots(profile_name, snapshots_to_delete, rds, dry_run):
    try:
        existing_snapshots = set()
        if os.path.isfile('snapshots.csv'):
            with open('snapshots.csv', mode='r', newline='') as file:
                reader = csv.reader(file)
                next(reader, None)  # Skip header
                for row in reader:
                    existing_snapshots.add((row[1], row[0], row[4]))  # (DBSnapshotIdentifier, Profile, Type)

        with open('snapshots.csv', mode='a', newline='') as file:
            writer = csv.writer(file)

            for snapshot_id, start_time, size, snapshot_type in snapshots_to_delete:
                print(f"{'DRY RUN: ' if dry_run else ''}Deleting {snapshot_type} snapshot: {snapshot_id} (Size: {size}GB, StartTime: {start_time})")
                if not dry_run:
                    if snapshot_id.startswith('arn:aws:rds'):
                        rds.delete_db_cluster_snapshot(DBClusterSnapshotIdentifier=snapshot_id)
                    else:
                        rds.delete_db_snapshot(DBSnapshotIdentifier=snapshot_id)
                
                if (snapshot_id, profile_name, snapshot_type) not in existing_snapshots:
                    writer.writerow([profile_name, snapshot_id, start_time.strftime('%Y-%m-%d %H:%M:%S'), size, snapshot_type])
                    existing_snapshots.add((snapshot_id, profile_name, snapshot_type))
    except KeyboardInterrupt:
        print("KeyboardInterrupt: Stopping the operation.")
        sys.exit(0)
    except Exception as e:
        print(f"Error occurred during snapshot deletion: {e}")
        sys.exit(1)

def list_snapshots(profile_name, older_than_date, region, snapshot_type):
    try:
        snapshots_to_delete = get_snapshots(profile_name, older_than_date, region, snapshot_type)

        if not snapshots_to_delete:
            print(f"No snapshots of type '{snapshot_type}' found for profile '{profile_name}' older than {older_than_date}.")
            return

        print(f"List of snapshots of type '{snapshot_type}' for profile '{profile_name}' to be deleted (sorted by StartTime):")
        for snapshot_id, start_time, size, _ in sorted(snapshots_to_delete, key=lambda x: x[1]):
            print(f"{snapshot_type.upper()}: {snapshot_id}, {size}GB, {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
    except KeyboardInterrupt:
        print("KeyboardInterrupt: Stopping the operation.")
        sys.exit(0)
    except Exception as e:
        print(f"Error occurred while listing snapshots: {e}")
        sys.exit(1)

def delete_snapshots(profile_name, snapshots_to_delete, rds, dry_run):
    try:
        file_exists = os.path.isfile('snapshots.csv')

        with open('snapshots.csv', mode='a', newline='') as file:
            writer = csv.writer(file)
            
            if not file_exists or os.stat('snapshots.csv').st_size == 0:
                writer.writerow(['Profile', 'DBSnapshotIdentifier', 'SnapshotCreateTime', 'AllocatedStorage', 'Type'])
            
            for snapshot_id, start_time, size, snapshot_type in snapshots_to_delete:
                print(f"{'DRY RUN: ' if dry_run else ''}Deleting {snapshot_type} snapshot: {snapshot_id} (Size: {size}GB, StartTime: {start_time})")
                if not dry_run:
                    if snapshot_id.startswith('arn:aws:rds'):
                        rds.delete_db_cluster_snapshot(DBClusterSnapshotIdentifier=snapshot_id)
                    else:
                        rds.delete_db_snapshot(DBSnapshotIdentifier=snapshot_id)
                    writer.writerow([profile_name, snapshot_id, start_time.strftime('%Y-%m-%d %H:%M:%S'), size, snapshot_type])
    except KeyboardInterrupt:
        print("KeyboardInterrupt: Stopping the operation.")
        sys.exit(0)
    except Exception as e:
        print(f"Error occurred during snapshot deletion: {e}")
        sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) < 4:
        print("Usage: python script.py <profile_name|all> <list|delete> <date> [--dry-run]")
        sys.exit(1)

    profile_name = sys.argv[1]
    action = sys.argv[2]
    date_str = sys.argv[3]
    dry_run = '--dry-run' in sys.argv

    # Parse date
    try:
        older_than_date = datetime.strptime(date_str, "%Y.%m.%d").replace(tzinfo=pytz.UTC)
    except ValueError:
        print("Invalid date format. Please use YYYY.MM.DD.")
        sys.exit(1)

    # Get AWS config path
    home_dir = os.path.expanduser("~")
    aws_config_path = os.path.join(home_dir, '.aws', 'config')

    snapshot_types = ['automated', 'manual']

    # Perform action based on profile_name
    if profile_name.lower() == "all":
        with open(aws_config_path, 'r') as file:
            lines = file.readlines()
            profiles = [line.strip().split(" ")[1].strip("]") for line in lines if line.strip().startswith("[profile")]
            for current_profile in profiles:
                region = get_region_for_profile(current_profile, aws_config_path)
                for snapshot_type in snapshot_types:
                    if action == "list":
                        list_snapshots(current_profile, older_than_date, region, snapshot_type)
                    elif action == "delete":
                        session = boto3.Session(profile_name=current_profile)
                        rds = session.client('rds', region_name=region)
                        snapshots_to_delete = get_snapshots(current_profile, older_than_date, region, snapshot_type)
                        delete_snapshots(current_profile, snapshots_to_delete, rds, dry_run)
                    else:
                        print("Invalid action. Please use 'list' or 'delete'.")
                        sys.exit(1)

    else:
        region = get_region_for_profile(profile_name, aws_config_path)
        for snapshot_type in snapshot_types:
            if action == "list":
                list_snapshots(profile_name, older_than_date, region, snapshot_type)
            elif action == "delete":
                session = boto3.Session(profile_name=profile_name)
                rds = session.client('rds', region_name=region)
                snapshots_to_delete = get_snapshots(profile_name, older_than_date, region, snapshot_type)
                delete_snapshots(profile_name, snapshots_to_delete, rds, dry_run)
            else:
                print("Invalid action. Please use 'list' or 'delete'.")
                sys.exit(1)

