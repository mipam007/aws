#!/usr/bin/env python3
import boto3
import datetime
import matplotlib.pyplot as plt
import csv
from collections import defaultdict

def get_cloudwatch_data(profile, region, volume_id, start_time, end_time, period):
    boto3.setup_default_session(profile_name=profile, region_name=region)
    cloudwatch = boto3.client('cloudwatch')

    response = cloudwatch.get_metric_statistics(
        Namespace='AWS/EBS',
        MetricName='VolumeWriteBytes',
        Dimensions=[
            {
                'Name': 'VolumeId',
                'Value': volume_id
            },
        ],
        StartTime=start_time,
        EndTime=end_time,
        Period=period,
        Statistics=['Sum']
    )
    
    return response['Datapoints']

def plot_data(data, filename):
    if not data:
        print("No data to plot.")
        return

    daily_data = defaultdict(float)

    for point in data:
        date = point['Timestamp'].date()
        daily_data[date] += point['Sum'] * 8 / (1024 ** 3)  # Convert to Gigabits

    dates = sorted(daily_data.keys())
    values = [daily_data[date] for date in dates]

    plt.figure(figsize=(10, 5))
    plt.plot(dates, values, marker='o')
    plt.title('AWS EBS Volume Write Bytes in Gigabits per Day')
    plt.xlabel('Date')
    plt.ylabel('Volume Write Bytes (Gb)')
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(filename)
    plt.show()

    # Print daily data
    for date, value in daily_data.items():
        print(f"Date: {date}, Write Bytes: {value:.2f} Gb")

def save_data_to_csv(data, filename):
    if not data:
        print("No data to save.")
        return

    daily_data = defaultdict(float)

    for point in data:
        date = point['Timestamp'].date()
        daily_data[date] += point['Sum'] * 8 / (1024 ** 3)  # Convert to Gigabits

    with open(filename, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['Date', 'Volume Write Bytes (Gb)'])
        for date, value in daily_data.items():
            writer.writerow([date, value])

def main():
    profile = input("Enter AWS SSO profile: ")
    region = input("Enter AWS region: ")
    volume_id = input("Enter volume ID: ")
    start_time = input("Enter start time (YYYY-MM-DD HH:MM:SS): ")
    end_time = input("Enter end time (YYYY-MM-DD HH:MM:SS): ")
    period = 86400  # 1 day in seconds

    start_time = datetime.datetime.strptime(start_time, "%Y-%m-%d %H:%M:%S")
    end_time = datetime.datetime.strptime(end_time, "%Y-%m-%d %H:%M:%S")

    data = get_cloudwatch_data(profile, region, volume_id, start_time, end_time, period)
    save_data_to_csv(data, 'volume_write_data.csv')
    plot_data(data, 'volume_write_plot.png')

if __name__ == "__main__":
    main()

